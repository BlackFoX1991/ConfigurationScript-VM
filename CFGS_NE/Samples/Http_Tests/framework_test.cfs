import "framework.cfs";

# ---------- 404/500 Seiten ----------
class NotFoundPage(path) : BaseView
{
    func heading() { return "404 – Not Found"; }
    func content(props) {
        return [
            dom.h("p", null, "Die angeforderte Ressource wurde nicht gefunden: "),
            dom.h("code", null, this.path),
            dom.h("p", null, ["Zurück zur ", dom.h("a", {"href":"/"}, "Startseite")])
        ];
    }
}

class ErrorPage(msg) : BaseView
{
    func heading() { return "500 – Serverfehler"; }
    func content(props) {
        return [
            dom.h("p", null, "Es ist ein Fehler aufgetreten."),
            dom.h("pre", null, this.msg),
            dom.h("p", null, ["Zurück zur ", dom.h("a", {"href":"/"}, "Startseite")])
        ];
    }
}

# ---------- Demo-Seiten ----------
class HomePage : BaseView
{
    func heading() { return "Routen"; }

    func nav() {
        return dom.h("p", {"class":"muted"}, "Navigation · Demo");
    }

    func content(props) {
        return dom.h("ul", {"class":"routes"}, [
            dom.h("li", null, dom.h("a", {"href":"/hello"}, "/hello (Hello World!)")),
            dom.h("li", null, dom.h("a", {"href":"/echo/World"}, "/echo/World")),
            dom.h("li", null, dom.h("a", {"href":"/add?a=7&b=5"}, "/add?a=7&b=5")),
            dom.h("li", null, dom.h("a", {"href":"/getbin"}, "/getbin (Proxy-GET)")),
            dom.h("li", null, dom.h("a", {"href":"/mirror"}, "POST /mirror (curl)")),
            dom.h("li", null, dom.h("a", {"href":"/mirror-form"}, "GET /mirror-form (Form)")),
            dom.h("li", null, dom.h("a", {"href":"/json-demo"}, "GET /json-demo (respond_json)")),
            dom.h("li", null, dom.h("a", {"href":"/go-home"}, "GET /go-home (redirect)")),
            dom.h("li", null, dom.h("a", {"href":"/static/example.txt"}, "GET /static/example.txt (static)")),
            dom.h("li", null, dom.h("a", {"href":"/exit"}, "/exit"))
        ]);
    }
}

class EchoPage(name) : BaseView
{
    func heading() { return "Echo"; }
    func content(props) {
        return [
            dom.h("h2", null, "Hello, " + this.name + "!"),
            dom.h("p", null, ["Zurück zur ", dom.h("a", {"href":"/"}, "Startseite")])
        ];
    }
}

class HelloPage : BaseView
{
    func heading() { return "Hello World"; }
    func render(props) {
        var inner = [
            dom.h("h2", null, "Hello World!"),
            dom.h("p", null, ["Zurück zur ", dom.h("a", {"href":"/"}, "Startseite")])
        ];
        return super.layout(inner);
    }
}

class MirrorFormPage : BaseView
{
    func heading() { return "Mirror (Form)"; }
    func content(props) {
        return [
            dom.h("form", {"action":"/mirror", "method":"POST", "enctype":"application/x-www-form-urlencoded"},
                [
                    dom.h("p", null, dom.h("input", {"name":"who","placeholder":"Name"}, "")),
                    dom.h("p", null, dom.h("textarea", {"name":"payload","rows":"6","cols":"60","placeholder":"Text hier…"}, "")),
                    dom.h("p", null, dom.h("button", {"type":"submit"}, "abschicken"))
                ]
            ),
            dom.h("p", null, ["Oder per ", dom.h("code", null, "curl -X POST -d 'who=You&payload=Hi' http://localhost:8080/mirror"), "."])
        ];
    }
}

# =========================================
# HTTP-Integration / App-Wiring
# =========================================

func main()
{
    var PORT = 8080;
    print("Starte Server auf http://localhost:" + str(PORT) + "/");
    var srv = http_server(PORT).start();

    var xapp = new app();

    # --- Middleware: Logging & CORS Beispiel ---
    xapp.use_before(func(req) {
        print(req.method + " " + req.path);
        if (req.method == "OPTIONS") {
            return {
                "status":204,
                "headers":{
                    "Access-Control-Allow-Origin":"*",
                    "Access-Control-Allow-Methods":"GET,POST,OPTIONS",
                    "Access-Control-Allow-Headers":"Content-Type"
                },
                "body":""
            };
        }
        return null;
    });

    xapp.use_after(func(req, res) {
        res.headers["Access-Control-Allow-Origin"] = "*";
        return res;
    });

    # --- Static: Beispiel-Loader (eingebettet) ---
    func embedded_static_loader(rel) {
        if (rel == "example.txt") {
            return {"data":"Hello from static!\n", "content_type":"text/plain; charset=utf-8"};
        }
        return null;
    }
    xapp.serve_static_with("/static/", embedded_static_loader, 3600);

    # --- Routen ---
    xapp.get("/", func(req) {
        var page = new HomePage().render({});
        return {"status":200, "headers":{"Content-Type":"text/html; charset=utf-8"}, "body":page};
    });

    xapp.get("/hello", func(req) {
        var page = new HelloPage().render({});
        return {"status":200, "headers":{"Content-Type":"text/html; charset=utf-8"}, "body":page};
    });

    xapp.get("/echo/:name", func(req) {
        var name = req.params["name"];
        var page = new EchoPage(name).render({});
        return {"status":200, "headers":{"Content-Type":"text/html; charset=utf-8"}, "body":page};
    });

    xapp.get("/mirror-form", func(req) {
        var page = new MirrorFormPage().render({});
        return {"status":200, "headers":{"Content-Type":"text/html; charset=utf-8"}, "body":page};
    });

    xapp.get("/add", func(req) {
        var q = req.query;
        var a = toi32(util.qv(q, "a", "0"));
        var b = toi32(util.qv(q, "b", "0"));
        var sum = a + b;
        return app.respond_json({"a":a,"b":b,"sum":sum});
    });

    xapp.post("/mirror", func(req) {
        var parsed = util.parse_form(req);
        return {"status":200, "headers":{"Content-Type":"application/json; charset=utf-8"}, "body": util.to_json(parsed)};
    });

    xapp.get("/json-demo", func(req) {
        return app.respond_json({"ok":true,"time":str(now()),"note":"Hello JSON"});
    });

    xapp.get("/go-home", func(req) {
        return app.respond_redirect(302, "/");
    });

    # sauberer Exit
    var RUN = true;
    xapp.get("/exit", func(req) {
        RUN = false;
        return {"status":200, "headers":{"Content-Type":"text/plain; charset=utf-8"}, "body":"Server wird beendet...\n"};
    });

    # --- Loop ---
    while (srv.is_running() && RUN) {
        var req = srv.poll(1000);
        if (req != null) {
            var fReq = {
                "id": req.id,
                "method": req.method,
                "path": req.path,
                "query": req.query,
                "headers": req.headers,
                "body": req.body,
                "remote": req.remote,
                "params": {}
            };
            var res = xapp.serve_req(fReq);
            if (res == null) res = app.error_500("Handler returned null.");
            srv.respond(req.id, res.status, res.body, res.headers);
        }
    }

    srv.stop();
    srv.close();
    print("Server beendet.");
}
main();